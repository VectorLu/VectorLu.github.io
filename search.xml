<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[去掉 mac 终端下长长的电脑名和用户名]]></title>
      <url>%2F2016%2F11%2F27%2Fremove-long-pc-user-name%2F</url>
      <content type="text"><![CDATA[在Linux 或 macOS 下用 bash 的时候，当然如果你是 zsh 用户，一般不会有这种困扰——终端每一行前面有好长的一串——“本机名 当前路径 用户名”，再是表示等待输入指令的$。在 bash 下要如何去掉这些冗长的信息呢？ 在终端下进入/etc目录，这个目录是类 Unix 系统存放一些零碎的系统配置文件的文件夹。 用文本编辑器打开bashrc，我习惯用 Atom 。 1$ atom /etc/bashrc PS1: 控制默认命令行提示符的格式。在终端下用echo $PS1命令显示当前提示符设置。 Richard BlomLinux 命令行与 Shell 脚本编程大全第2版 所以，修改bashrc文件中的PS1的值就可以了 ‘\h’ 指的是主机‘\W’ 指的是当前工作目录‘\u’ 指的是当前用户 修改成你喜欢的样子就好了，一般保留\W。[^source] [^source]: 去掉（隐藏）mac终端前面的计算机名 ta 的博客中 20161028的那一篇 感谢 liuxiaojia 这位朋友的提醒，同时，诚恳建议 Hexo 博客的文件名中不要包涵特殊的中文符号，比如中文括号，给正确复制博客网址带来了莫大的困难 Orz 。建议新建 Hexo 博客可以全部用英文，因为中文在复制过程中容易乱码，中文符号也会带来一些麻烦 Orz 。Hexo 生成博客的 URL 完全根据文件名生成。至于博客的题目title字段就无所谓了，对中文及相关符号很友好。设置成你喜欢的中文名就好了， 效果如下]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo_4_NexT_Pisces_主题配置细节]]></title>
      <url>%2F2016%2F11%2F26%2FHexo-4-theme-NexT-Pisces-details%2F</url>
      <content type="text"><![CDATA[开始使用 安装]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo_3_写作与更新的细节]]></title>
      <url>%2F2016%2F11%2F26%2FHexo-3-writing-update-blog%2F</url>
      <content type="text"><![CDATA[基本操作就是根据Hexo官方文档NexT官方文档来配置一些细节，在这里用图文记录一下具体过程和比较常用的命令。 写作创建新文章1$ hexo new [layout] &lt;title&gt; 创建了新文章之后打开，会在文章开头看到类似以下内容的东西。 123456789---title: 使用 Hexo 搭建博客的细节配置 1date: 2016-11-26 00:03:44categories:- KITtags:- blog- hexo--- 这个部分是用来指定该文章的各种变量哒： 参数 描述 默认值 layout 布局 title title date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页) permalink 覆盖文章网址 － 只有文章支持分类和标签，page 不支持，标签没有顺序和层次。 引用md 本身有自己的引用语法 这是第一行引用这是第二行引用引用方式非常简单，但是引用的样式比较单一，如果要显示引用源的相关信息就力不从心了。 以下来自标签插件，摘录到本地方便查阅。 引用网络上的文章123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; 效果： Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 引用 Twitter123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125; NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用书上的句子123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 没有提供参数，则只输出普通的 blockquote123&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 创建新页面比如新建about页面 1hexo new page about 服务器hexo-server安装1$ npm install hexo-server --save 启动安装完成后，输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。1$ hexo server 或 1$ hexo s 更改端口想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下： 1$ hexo server -p 5000 生成文件hexo generate 或 hexo g 完成后部署执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。 12$ hexo generate --deploy$ hexo deploy --generate 部署详见 多语种支持在站点配置文件 _config.yml 中修改 new_post_name 和 permalink 参数，如下： 12new_post_name: :lang/:title.mdpermalink: :lang/:title/ 建立新文章时，文章会被存储到： 12$ hexo new "Hello World" --lang tw# =&gt; source/_posts/tw/Hello-World.md 而网址会是http://localhost:4000/tw/hello-world/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo-2-用 Coding Pages 部署 Hexo 博客]]></title>
      <url>%2F2016%2F11%2F26%2FHexo-2-coding-pages%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo-1-用 Github Pages 部署 Hexo 博客]]></title>
      <url>%2F2016%2F11%2F26%2FHexo-1-github-pages%2F</url>
      <content type="text"><![CDATA[安装好了 Hexo，下一步就是：将自己的博客放到网上，让每个人都能访问。 介绍一下如何用 Github 的 Pages 服务来支持静态博客。如果你对 Git 还不熟悉，那么建议你先阅读一下（不阅读也没有关系，因为 Hexo 不需要太多 Git 的知识）：廖雪峰的Git教程 Step-0-注册Github在 Github官网 中 sign up 就好了。 Step-1-管理远程仓库相关命令概览与说明其实用不到这么多 git 的知识，只是顺带介绍一下，可跳过。 1234567891011121314151617ssh-keygen -t rsa -C ("youremail@example.com")#创建ssh keygit remote add origin (repository address on github)#关联远程仓库git remote -help #用来查看帮助git push -u origin master#第一次推送本地内容到远程仓库要加 -u参数git push origin master#以后就可以直接推送内容了git clone (repository address on github)#将repository克隆到本地 添加远程仓库 SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。 由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置： 创建SSH Key在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key： 1$ ssh-keygen -t rsa -C "youremail@example.com" 需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 用文本编辑器打开 id_rsa.pub ，比如atom（如果安装了atom），vi等 也可以用这样方法打开id_rsa文件如果没有安装atom，可以用vi打开$ vi id_rsa 登陆Github打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key：以上两张图片来自廖雪峰的git教程 测试一下 1ssh -T git@github.com 可能会有警告，不过没关系，输入yes就好。 在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。 添加 Repository首先，登陆GitHub，然后，在右上角找到一个加号，点击“ New repository”按钮，创建一个新的仓库，仓库名用username.github.io。比如我的用户名是VectorLu，那么新建的仓库名（Repository name）就是VectorLu.github.io。 下面的 Description 随便写就好了，比如写 My blog repository. 其他的都不用管，点下面的绿色按钮Create repository就好了。 #Step-2-部署本地的 Hexo 博客到 Github还记得在 Hexo-0 中用 hexo init foldname 那个文件夹吗？进入文件夹，用文本编辑器打开_config.yml，我习惯用atom打开，或者用自带的vi打开也可以。 也许你没有atom，也不会用vim。那就在Finder中找到这个文件，双击，应该会默认用Xcode打开。 用command+f快捷键，或者直接在这个文件的最后（一般是放在最后）找到deploy字段。修改成如下样式，注意把所有 VectorLu 换成你的 Github 用户名。 12345deploy: type: git repo: github: git@github.com:VectorLu/VectorLu.github.io.git branch: master 保存，进入终端。 1234$ npm install hexo-deployer-git --save # 安装相关组件$ hexo clean$ hexo g$ hexo d 应该一会就部署好了，在浏览器中输入username.github.io就可以访问你的博客了。如果没有刷出来，可能是网络问题，多等一会就可以刷出来了。 Step-3-绑定个人域名（非必需）有很多网站出售域名，比如万网。 //TODO: !!!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo_0_Mac 下搭建自己的博客图文详解]]></title>
      <url>%2F2016%2F11%2F26%2FHexo-0-mac-build-blog%2F</url>
      <content type="text"><![CDATA[Hexo 安装与建站分享一下 2016-11 在 Mac 下使用 Hexo3 &amp; github &amp; coding &amp; 万网 搭建博客的经验、技巧、注意事项。 用 Hexo 建站命令行概览注意！HexoBlogFolder这个文件名仅作为提示，选择任何你喜欢的文件名就好，以后这个文件夹中包含所有部署博客的相关文件，你也会在这个文件夹里存放你的思想结晶博客。 12345$ hexo init HexoBlogFolder$ cd HexoBlogFolder$ npm install$ hexo g # 等于 hexo generate$ hexo s # 等于 hexo server Hexo 安装安装 Hexo 时常容易出问题，原因一般是没有sudo授权。以前装过 Hexo，感觉麻烦不少，老是报错，但是这次（20161124），正好在 Hexo 重大更新到 Hexo3 之后，安装过程还比较顺利。需要注意的是：在 macOS 和 Linux 下 Hexo 安装时需要root权限，官方文档上给出的命令行没有用sudo实在有点坑 Orz。不过官方文档还是得看看，毕竟是最权威的资料，虽然有时候不够详细。 Step0-Git 安装首先需要有Git，如果已经安装 Xcode ，那么Git应该已经安装好了。因为 Hexo 需要用到 Xcode，所以在 AppStore 中下载安装就好了。如果不确定mac上是否有Git，可以在命令行中输入git --version查看。 如果已经安装，会显示出Git的版本。 如果没有安装，可以用多种方法安装，比如安装程序、Homebrew 安装。 Step0-Node.js 安装个人认为最好是用 Node.js 的官网安装包直接安装。一直确定就好了。 Step1-Hexo 安装官网上给出的命令行在 mac 上应该不能成功安装 Hexo $ npm install -g hexo-cli 需要使用： 1$ sudo npm install -g hexo-cli 没有什么 error 应该就没问题了。 Step2-Hexo 建站用终端cd到你喜欢的位置，比如cd Document然后执行下列命令，Hexo 会在~/Document/下新建所需文件 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 比如我就在~下新建了myBlog文件夹 123~ $ hexo init myBlog$ cd myBlog$ npm install Hexo 就安装好了，再执行 12$ hexo generate$ hexo server 上述命令也可以写作 12$ hexo g$ hexo s 就可以生成博客所需的文件，并启动本地服务器。 打开本地浏览器，在地址栏输入 localhost:4000，如下图，就能看到 Hexo 的 Hello World 界面。当然你的界面和我的还不一样，不过别着急，你马上就可以配置自己的个性界面了：） 安装主题 NexT逛了一圈 Hexo 的主题，每种主题都有各自的惊艳之处和不足之点。也打算自己写个主题，但是看了一下日程表，大概一年内都没有时间学习开发，关键是之后的文档支持和维护，都有点麻烦。 最后就选择了 NexT 的 Pisces。 在终端下进入之前用 Hexo 初始化的文件夹，比如我的是 myBlog，cd myBlog然后： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 进入myBlog文件夹，找到_config.yml（这个目录下的这个文件是站点配置文件），用 Xcode 或者文本编辑器打开，找到 theme 字段，修改成（注意冒号和 next 之间有一个空格。 1theme: next 进入theme文件夹，进入next文件夹，找到_config.yml（这个目录下的是NexT主题配置文件），找到 Schemes 字段，有三种主题可供选择，比如我个人比较喜欢 Pisces 1234# Schemes#scheme: Muse#scheme: Mistscheme: Pisces 在终端进入myBlog文件夹 123$ hexo clean$ hexo g$ hexo s 打开浏览器，输入http://localhost:4000/就会看到 Pisces 主题的界面了。 当然还有很多细节需要配置，我在后面的博文中也会陆续分享自己的经验。如果有好的建议，请不吝赐教。 Hexo官方文档NexT官方文档]]></content>
    </entry>

    
  
  
</search>
